'use client'

import { useState, useEffect } from 'react'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { format } from 'date-fns'
import { Badge } from '@/components/ui/badge'
import { FileText, Search, Download, Loader2, RefreshCw } from 'lucide-react'
import { toast } from 'react-hot-toast'
import { useThemeStore } from "@/lib/theme-store"

// Updated Report interface to match API response
interface Report {
  id: string;
  type: string;
  generatedAt: string;
  status: 'completed' | 'generating' | 'failed';
  cost: number;
  pdfUrl?: string;
  generatedBy: string;
  userId: number;
  userEmail: string;
  userPhone: string;
}

export default function ReportHistoryPage() {
  const [reports, setReports] = useState<Report[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [isFetchError, setIsFetchError] = useState(false)
  const [sorting, setSorting] = useState<SortingState>([])
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([])
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({})
  const [searchQuery, setSearchQuery] = useState("")
  const { accentColor } = useThemeStore()

  // Enhanced fetch reports function
  const fetchReports = async () => {
    try {
      setIsLoading(true)
      setIsFetchError(false)
      const response = await fetch('/api/report-history')
      
      if (!response.ok) {
        throw new Error('Failed to fetch reports')
      }
      
      const result = await response.json()
      
      if (result.success && result.data) {
        setReports(result.data)
      } else {
        throw new Error('Invalid response format')
      }
    } catch (error) {
      console.error('Error fetching reports:', error)
      setIsFetchError(true)
      toast.error(error instanceof Error ? error.message : 'Failed to fetch reports')
    } finally {
      setIsLoading(false)
    }
  }

  // Initial fetch
  useEffect(() => {
    fetchReports()
  }, [])

  const handleExportToExcel = () => {
    // Convert data to CSV format
    const headers = [
      'Report ID', 'Type', 'Generated By', 'Generated At', 
      'Status', 'Cost', 'User Email', 'User Phone'
    ]
    const csvData = reports.map(report => [
      report.id,
      report.type,
      report.generatedBy,
      format(new Date(report.generatedAt), "PPpp"),
      report.status,
      `₹${report.cost}`,
      report.userEmail,
      report.userPhone
    ])

    // Create CSV content
    const csvContent = [
      headers.join(','),
      ...csvData.map(row => row.map(cell => `"${cell}"`).join(','))
    ].join('\n')

    // Create and download file
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
    const link = document.createElement('a')
    const url = URL.createObjectURL(blob)
    link.setAttribute('href', url)
    link.setAttribute('download', `report_history_${format(new Date(), 'yyyy-MM-dd')}.csv`)
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }

  const getThemeColors = () => {
    const colors = {
      blue: {
        header: "from-blue-600 to-blue-700",
        badge: {
          success: "bg-blue-100 text-blue-700",
          warning: "bg-amber-100 text-amber-700",
          destructive: "bg-red-100 text-red-700"
        },
        button: "bg-blue-600 hover:bg-blue-700"
      },
      green: {
        header: "from-green-600 to-green-700",
        badge: {
          success: "bg-green-100 text-green-700",
          warning: "bg-amber-100 text-amber-700",
          destructive: "bg-red-100 text-red-700"
        },
        button: "bg-green-600 hover:bg-green-700"
      },
      purple: {
        header: "from-purple-600 to-purple-700",
        badge: {
          success: "bg-purple-100 text-purple-700",
          warning: "bg-amber-100 text-amber-700",
          destructive: "bg-red-100 text-red-700"
        },
        button: "bg-purple-600 hover:bg-purple-700"
      },
      rose: {
        header: "from-rose-600 to-rose-700",
        badge: {
          success: "bg-rose-100 text-rose-700",
          warning: "bg-amber-100 text-amber-700",
          destructive: "bg-red-100 text-red-700"
        },
        button: "bg-rose-600 hover:bg-rose-700"
      },
      amber: {
        header: "from-amber-600 to-amber-700",
        badge: {
          success: "bg-amber-100 text-amber-700",
          warning: "bg-amber-100 text-amber-700",
          destructive: "bg-red-100 text-red-700"
        },
        button: "bg-amber-600 hover:bg-amber-700"
      },
      teal: {
        header: "from-teal-600 to-teal-700",
        badge: {
          success: "bg-teal-100 text-teal-700",
          warning: "bg-amber-100 text-amber-700",
          destructive: "bg-red-100 text-red-700"
        },
        button: "bg-teal-600 hover:bg-teal-700"
      }
    }
    return colors[accentColor] || colors.blue
  }

  const themeColors = getThemeColors()

  const columns: ColumnDef<Report>[] = [
    {
      accessorKey: "id",
      header: "Report ID",
      cell: ({ row }) => <div className="font-medium">{row.getValue("id")}</div>
    },
    {
      accessorKey: "type",
      header: "Type",
      cell: ({ row }) => (
        <div className="font-medium capitalize">{row.getValue("type")}</div>
      )
    },
    {
      accessorKey: "generatedBy",
      header: "Generated For",
      cell: ({ row }) => (
        <div className="font-medium">{row.getValue("generatedBy")}</div>
      )
    },
    {
      accessorKey: "generatedAt",
      header: "Generated At",
      cell: ({ row }) => (
        <div className="font-medium">
          {format(new Date(row.getValue("generatedAt")), "PPpp")}
        </div>
      )
    },
    {
      accessorKey: "status",
      header: "Status",
      cell: ({ row }) => {
        const status = row.getValue("status") as string
        return (
          <Badge
            className={
              status === "completed"
                ? themeColors.badge.success
                : status === "generating"
                ? themeColors.badge.warning
                : themeColors.badge.destructive
            }
          >
            {status}
          </Badge>
        )
      }
    },
    {
      accessorKey: "cost",
      header: "Cost",
      cell: ({ row }) => (
        <div className="font-medium">₹{row.getValue("cost")}</div>
      )
    },
    {
      accessorKey: "userEmail",
      header: "User Email",
      cell: ({ row }) => (
        <div className="font-medium">{row.getValue("userEmail")}</div>
      )
    },
    {
      id: "actions",
      cell: ({ row }) => {
        const report = row.original
        return (
          <Button
            variant="ghost"
            size="icon"
            disabled={!report.pdfUrl}
            onClick={() => window.open(report.pdfUrl, '_blank')}
          >
            <FileText className="h-4 w-4" />
          </Button>
        )
      }
    }
  ]

  const table = useReactTable({
    data: reports,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      globalFilter: searchQuery
    },
    onGlobalFilterChange: setSearchQuery,
  })

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex justify-between items-center">
        <h1 className={`text-4xl font-bold bg-gradient-to-r ${themeColors.header} bg-clip-text text-transparent`}>
          Report History
        </h1>
        <div className="flex space-x-2">
          {isFetchError && (
            <Button
              onClick={fetchReports}
              variant="outline"
              className="text-red-600"
            >
              <RefreshCw className="h-4 w-4 mr-2" />
              Retry Fetch
            </Button>
          )}
          <Button
            onClick={handleExportToExcel}
            className={themeColors.button}
          >
            <Download className="h-4 w-4 mr-2" />
            Export to CSV
          </Button>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow-sm">
        <div className="p-4">
          <div className="flex items-center gap-2 max-w-sm">
            <Search className="h-4 w-4 text-slate-500" />
            <Input
              placeholder="Search reports..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="h-8"
            />
          </div>
        </div>

        <div className="border-t">
          {isLoading ? (
            <div className="flex items-center justify-center h-32">
              <div className="flex items-center space-x-2">
                <Loader2 className="w-4 h-4 animate-spin" />
                <p className="text-sm text-muted-foreground">Loading reports...</p>
              </div>
            </div>
          ) : isFetchError ? (
            <div className="flex items-center justify-center h-32 text-red-600">
              <p>Failed to load reports. Please try again.</p>
            </div>
          ) : (
            <Table>
              <TableHeader>
                {table.getHeaderGroups().map((headerGroup) => (
                  <TableRow key={headerGroup.id}>
                    {headerGroup.headers.map((header) => {
                      return (
                        <TableHead key={header.id}>
                          {header.isPlaceholder
                            ? null
                            : flexRender(
                                header.column.columnDef.header,
                                header.getContext()
                              )}
                        </TableHead>
                      )
                    })}
                  </TableRow>
                ))}
              </TableHeader>
              <TableBody>
                {table.getRowModel().rows?.length ? (
                  table.getRowModel().rows.map((row) => (
                    <TableRow
                      key={row.id}
                      data-state={row.getIsSelected() && "selected"}
                    >
                      {row.getVisibleCells().map((cell) => (
                        <TableCell key={cell.id}>
                          {flexRender(
                            cell.column.columnDef.cell,
                            cell.getContext()
                          )}
                        </TableCell>
                      ))}
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell
                      colSpan={columns.length}
                      className="h-24 text-center"
                    >
                      No reports found.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          )}
        </div>

        <div className="flex items-center justify-end p-4 space-x-2 border-t">
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
          >
            Previous
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
          >
            Next
          </Button>
        </div>
      </div>
    </div>
  )
}